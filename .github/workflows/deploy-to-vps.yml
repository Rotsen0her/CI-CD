name: CI / Build and deploy to VPS (Docker)

# Se dispara en push a main o manualmente
on:
  push:
    branches: [ 'main' ]
  workflow_dispatch:

jobs:
  build-and-push:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push image
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.REGISTRY }}/${{ secrets.REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set image output
        run: echo "IMAGE=${{ secrets.REGISTRY }}/${{ secrets.REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy-to-vps:
    name: Deploy to VPS via SSH
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Wait for image output
        run: echo "ready"

      - name: Deploy on VPS (ssh)
        uses: appleboy/ssh-action@v0.1.7
        env:
          IMAGE: ${{ secrets.REGISTRY }}/${{ secrets.REPOSITORY }}:${{ github.sha }}
          IMAGE_LATEST: ${{ secrets.REGISTRY }}/${{ secrets.REPOSITORY }}:latest
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_SSH_PORT }}
          timeout: 120s
          script: |
            set -e
            echo "Pulling image: $IMAGE"
            docker pull "$IMAGE"
            # Tag as latest if you want docker-compose to use :latest
            docker tag "$IMAGE" "$IMAGE_LATEST" || true
            # Ruta en el VPS donde está el docker-compose.yml
            cd /var/www/your-app || true
            # Opcional: exportar e inyectar variable de entorno para docker-compose
            export IMAGE="$IMAGE"
            # Si usas docker compose v2 (recommended):
            docker compose pull || true
            docker compose up -d --remove-orphans
            # Limpieza de imágenes antiguas (opcional)
            docker image prune -f || true

      - name: Notify
        run: echo "Deployed image ${{ secrets.REGISTRY }}/${{ secrets.REPOSITORY }}:${{ github.sha }} to ${{ secrets.VPS_HOST }}"
